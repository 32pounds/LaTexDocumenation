@startuml
class OSInputProcessor{
    {static} OSInputProcessor getInstance()
    void addInputPorcessor(InputProcessor inputProcessor)
    void removeInputPorcessor(InputProcessor inputProcessor)
    boolean keyDown(int keycode)
    boolean keyUp(int keycode)
    boolean keyTyped(char character)
    boolean touchDown(int screenX, int screenY, int pointer, int button)
    boolean touchUp(int screenX, int screenY, int pointer, int button)
    boolean touchDragged(int screenX, int screenY, int pointer)
    boolean mouseMoved(int screenX, int screenY)
    boolean scrolled(int amount)
}
class InputHandler{
    InputHandler(GameID target, CommandHandler cH)
    boolean keyDown(int keycode)
    boolean keyUp(int keycode)
    boolean keyTyped(char character)
    boolean touchDown(int screenX, int screenY, int pointer, int button)
    boolean touchUp(int screenX, int screenY, int pointer, int button)
    boolean touchDragged(int screenX, int screenY, int pointer)
    boolean mouseMoved(int screenX, int screenY)
    boolean scrolled(int amount)
}
interface CommandHandler {
    void handleCommand(Command cmd)
}
abstract class Command {
    {abstract} void execute(GameState state)
    char[] packetize()
    {static} Command parse(char[] input)
}
class OSGame{
    void create()
            void handle(String message)
    void handleCommand(Command cmd)
    void syncWithState(String state)
    void render()
}

OSGame --|> CommandHandler
InputHandler --|> InputProcessor
OSInputProcessor --|> InputProcessor
OSInputProcessor o-- "1..@" InputProcessor
PopupMenu --|> InputProcessor
InputHandler "1..*" o-- CommandHandler : "Gives commands to"

note top of OSInputProcessor
    libGDX sends input to a single InputHandler,
    OSInputProcessor collects multiple InputHandler
    and distributes input to them all"
end note

@enduml
